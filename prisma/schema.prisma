generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model test {
  id   Int    @id
  name String @db.VarChar(50)
}

enum category {
  figures
  cards
  clothes
  cosplay
}

model product {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(100)
  price         Decimal        @db.Decimal
  description   String         @db.VarChar(500)
  stock         Int
  images        Int
  category      category       @default(figures)
  createdAt     DateTime       @default(now())
  restockedAt   DateTime       @default(now())
  cart_products cart_product[]
}

model cart {
  id          Int            @id @default(autoincrement())
  products    cart_product[]
  user        User           @relation(fields: [uid], references: [id], onDelete: Cascade)
  isOneTime   Boolean        @default(false)
  isPurchased Boolean        @default(false)
  purchaseAt  DateTime?
  purchase    purchase?
  createdAt   DateTime       @default(now())
  uid         String
  purchaseID  Int?            @unique
}

model cart_product {
  id          Int      @id @default(autoincrement())
  cart        cart     @relation(fields: [cartID], references: [id], onDelete: Cascade)
  product     product  @relation(fields: [productID], references: [id], onDelete: Cascade)
  quantity    Int
  isDeleted   Boolean  @default(false)
  addedDate   DateTime @default(now())
  deletedDate DateTime?
  cartID      Int
  productID   Int
}

model purchase {
  id     Int  @id @default(autoincrement())
  cart   cart @relation(fields: [cartID], references: [id])
  cartID Int  @unique
  total  Decimal
}

////////////////
// next-auth
////////////////
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  carts         cart[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
